=begin
#OPEX API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.14-alpha

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module API
  # Get your orders, results is paginated.
  class PeatioOrder
    # Unique order id.
    attr_accessor :id

    # Either 'sell' or 'buy'.
    attr_accessor :side

    # Type of order, either 'limit' or 'market'.
    attr_accessor :ord_type

    # Price for each unit. e.g.If you want to sell/buy 1 btc at 3000 usd, the price is '3000.0'
    attr_accessor :price

    # Average execution price, average of price in trades.
    attr_accessor :avg_price

    # One of 'wait', 'done', or 'cancel'.An order in 'wait' is an active order, waiting fulfillment;a 'done' order is an order fulfilled;'cancel' means the order has been canceled.
    attr_accessor :state

    # The market in which the order is placed, e.g. 'btcusd'.All available markets can be found at /api/v2/markets.
    attr_accessor :market

    # Order create time in iso8601 format.
    attr_accessor :created_at

    # The amount user want to sell/buy.An order could be partially executed,e.g. an order sell 5 btc can be matched with a buy 3 btc order,left 2 btc to be sold; in this case the order's volume would be '5.0',its remaining_volume would be '2.0', its executed volume is '3.0'.
    attr_accessor :volume

    # The remaining volume, see 'volume'.
    attr_accessor :remaining_volume

    # The executed volume, see 'volume'.
    attr_accessor :executed_volume

    # Count of trades.
    attr_accessor :trades_count

    # Trades wiht this order.
    attr_accessor :trades

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'side' => :'side',
        :'ord_type' => :'ord_type',
        :'price' => :'price',
        :'avg_price' => :'avg_price',
        :'state' => :'state',
        :'market' => :'market',
        :'created_at' => :'created_at',
        :'volume' => :'volume',
        :'remaining_volume' => :'remaining_volume',
        :'executed_volume' => :'executed_volume',
        :'trades_count' => :'trades_count',
        :'trades' => :'trades'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'side' => :'String',
        :'ord_type' => :'String',
        :'price' => :'Float',
        :'avg_price' => :'Float',
        :'state' => :'String',
        :'market' => :'String',
        :'created_at' => :'String',
        :'volume' => :'Float',
        :'remaining_volume' => :'Float',
        :'executed_volume' => :'Float',
        :'trades_count' => :'Integer',
        :'trades' => :'Array<Trade>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.has_key?(:'ord_type')
        self.ord_type = attributes[:'ord_type']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'avg_price')
        self.avg_price = attributes[:'avg_price']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'market')
        self.market = attributes[:'market']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'volume')
        self.volume = attributes[:'volume']
      end

      if attributes.has_key?(:'remaining_volume')
        self.remaining_volume = attributes[:'remaining_volume']
      end

      if attributes.has_key?(:'executed_volume')
        self.executed_volume = attributes[:'executed_volume']
      end

      if attributes.has_key?(:'trades_count')
        self.trades_count = attributes[:'trades_count']
      end

      if attributes.has_key?(:'trades')
        if (value = attributes[:'trades']).is_a?(Array)
          self.trades = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          side == o.side &&
          ord_type == o.ord_type &&
          price == o.price &&
          avg_price == o.avg_price &&
          state == o.state &&
          market == o.market &&
          created_at == o.created_at &&
          volume == o.volume &&
          remaining_volume == o.remaining_volume &&
          executed_volume == o.executed_volume &&
          trades_count == o.trades_count &&
          trades == o.trades
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, side, ord_type, price, avg_price, state, market, created_at, volume, remaining_volume, executed_volume, trades_count, trades].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = API.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
