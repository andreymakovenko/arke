=begin
#OPEX API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.14-alpha

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module API
  class MarketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get your orders, results is paginated.
    # @param market 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Filter order by state, default to \&quot;wait\&quot; (active orders). (default to wait)
    # @option opts [Integer] :limit Limit the number of returned orders, default to 100. (default to 100)
    # @option opts [Integer] :page Specify the page of paginated results. (default to 1)
    # @option opts [String] :order_by If set, returned orders will be sorted in specific order, default to \&quot;asc\&quot;. (default to asc)
    # @return [Array<Order>]
    def get_market_orders(market, opts = {})
      data, _status_code, _headers = get_market_orders_with_http_info(market, opts)
      data
    end

    # Get your orders, results is paginated.
    # @param market 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state Filter order by state, default to \&quot;wait\&quot; (active orders).
    # @option opts [Integer] :limit Limit the number of returned orders, default to 100.
    # @option opts [Integer] :page Specify the page of paginated results.
    # @option opts [String] :order_by If set, returned orders will be sorted in specific order, default to \&quot;asc\&quot;.
    # @return [Array<(Array<Order>, Fixnum, Hash)>] Array<Order> data, response status code and response headers
    def get_market_orders_with_http_info(market, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_market_orders ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling MarketApi.get_market_orders"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['bchbtc', 'bchdash', 'bcheth', 'bchltc', 'bchtrst', 'bchusd', 'bchxrp', 'btcbch', 'btcdash', 'btceth', 'btcltc', 'btctrst', 'btcusd', 'btcxrp', 'dashbch', 'dashbtc', 'dasheth', 'dashltc', 'dashtrst', 'dashusd', 'dashxrp', 'ethbch', 'ethbtc', 'ethdash', 'ethltc', 'ethtrst', 'ethusd', 'ethxrp', 'ltcbch', 'ltcbtc', 'ltcdash', 'ltceth', 'ltctrst', 'ltcusd', 'ltcxrp', 'trstbch', 'trstbtc', 'trstdash', 'trsteth', 'trstltc', 'trstusd', 'trstxrp', 'usdbch', 'usdbtc', 'usddash', 'usdeth', 'usdltc', 'usdtrst', 'usdxrp', 'xrpbch', 'xrpbtc', 'xrpdash', 'xrpeth', 'xrpltc', 'xrptrst', 'xrpusd'].include?(market)
        fail ArgumentError, "invalid value for 'market', must be one of bchbtc, bchdash, bcheth, bchltc, bchtrst, bchusd, bchxrp, btcbch, btcdash, btceth, btcltc, btctrst, btcusd, btcxrp, dashbch, dashbtc, dasheth, dashltc, dashtrst, dashusd, dashxrp, ethbch, ethbtc, ethdash, ethltc, ethtrst, ethusd, ethxrp, ltcbch, ltcbtc, ltcdash, ltceth, ltctrst, ltcusd, ltcxrp, trstbch, trstbtc, trstdash, trsteth, trstltc, trstusd, trstxrp, usdbch, usdbtc, usddash, usdeth, usdltc, usdtrst, usdxrp, xrpbch, xrpbtc, xrpdash, xrpeth, xrpltc, xrptrst, xrpusd"
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['wait', 'done', 'cancel'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of wait, done, cancel'
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['asc', 'desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/peatio/market/orders'

      # query parameters
      query_params = {}
      query_params[:'market'] = market
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Order>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_market_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information of specified order.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def get_market_orders_id(id, opts = {})
      data, _status_code, _headers = get_market_orders_id_with_http_info(id, opts)
      data
    end

    # Get information of specified order.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def get_market_orders_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_market_orders_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MarketApi.get_market_orders_id"
      end
      # resource path
      local_var_path = '/peatio/market/orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_market_orders_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get your executed trades. Trades are sorted in reverse creation order.
    # @param market 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of returned trades. Default to 50. (default to 50)
    # @option opts [Integer] :timestamp An integer represents the seconds elapsed since Unix epoch. If set, only trades executed before the time will be returned.
    # @option opts [Integer] :from Trade id. If set, only trades created after the trade will be returned.
    # @option opts [Integer] :to Trade id. If set, only trades created before the trade will be returned.
    # @option opts [String] :order_by If set, returned trades will be sorted in specific order, default to &#39;desc&#39;. (default to desc)
    # @return [Trade]
    def get_market_trades(market, opts = {})
      data, _status_code, _headers = get_market_trades_with_http_info(market, opts)
      data
    end

    # Get your executed trades. Trades are sorted in reverse creation order.
    # @param market 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit the number of returned trades. Default to 50.
    # @option opts [Integer] :timestamp An integer represents the seconds elapsed since Unix epoch. If set, only trades executed before the time will be returned.
    # @option opts [Integer] :from Trade id. If set, only trades created after the trade will be returned.
    # @option opts [Integer] :to Trade id. If set, only trades created before the trade will be returned.
    # @option opts [String] :order_by If set, returned trades will be sorted in specific order, default to &#39;desc&#39;.
    # @return [Array<(Trade, Fixnum, Hash)>] Trade data, response status code and response headers
    def get_market_trades_with_http_info(market, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.get_market_trades ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling MarketApi.get_market_trades"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['bchbtc', 'bchdash', 'bcheth', 'bchltc', 'bchtrst', 'bchusd', 'bchxrp', 'btcbch', 'btcdash', 'btceth', 'btcltc', 'btctrst', 'btcusd', 'btcxrp', 'dashbch', 'dashbtc', 'dasheth', 'dashltc', 'dashtrst', 'dashusd', 'dashxrp', 'ethbch', 'ethbtc', 'ethdash', 'ethltc', 'ethtrst', 'ethusd', 'ethxrp', 'ltcbch', 'ltcbtc', 'ltcdash', 'ltceth', 'ltctrst', 'ltcusd', 'ltcxrp', 'trstbch', 'trstbtc', 'trstdash', 'trsteth', 'trstltc', 'trstusd', 'trstxrp', 'usdbch', 'usdbtc', 'usddash', 'usdeth', 'usdltc', 'usdtrst', 'usdxrp', 'xrpbch', 'xrpbtc', 'xrpdash', 'xrpeth', 'xrpltc', 'xrptrst', 'xrpusd'].include?(market)
        fail ArgumentError, "invalid value for 'market', must be one of bchbtc, bchdash, bcheth, bchltc, bchtrst, bchusd, bchxrp, btcbch, btcdash, btceth, btcltc, btctrst, btcusd, btcxrp, dashbch, dashbtc, dasheth, dashltc, dashtrst, dashusd, dashxrp, ethbch, ethbtc, ethdash, ethltc, ethtrst, ethusd, ethxrp, ltcbch, ltcbtc, ltcdash, ltceth, ltctrst, ltcusd, ltcxrp, trstbch, trstbtc, trstdash, trsteth, trstltc, trstusd, trstxrp, usdbch, usdbtc, usddash, usdeth, usdltc, usdtrst, usdxrp, xrpbch, xrpbtc, xrpdash, xrpeth, xrpltc, xrptrst, xrpusd"
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['asc', 'desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/peatio/market/trades'

      # query parameters
      query_params = {}
      query_params[:'market'] = market
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Trade')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#get_market_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a Sell/Buy order.
    # @param market 
    # @param side 
    # @param volume 
    # @param price 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ord_type  (default to limit)
    # @return [Order]
    def post_market_orders(market, side, volume, price, opts = {})
      data, _status_code, _headers = post_market_orders_with_http_info(market, side, volume, price, opts)
      data
    end

    # Create a Sell/Buy order.
    # @param market 
    # @param side 
    # @param volume 
    # @param price 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ord_type 
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def post_market_orders_with_http_info(market, side, volume, price, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.post_market_orders ...'
      end
      # verify the required parameter 'market' is set
      if @api_client.config.client_side_validation && market.nil?
        fail ArgumentError, "Missing the required parameter 'market' when calling MarketApi.post_market_orders"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['bchbtc', 'bchdash', 'bcheth', 'bchltc', 'bchtrst', 'bchusd', 'bchxrp', 'btcbch', 'btcdash', 'btceth', 'btcltc', 'btctrst', 'btcusd', 'btcxrp', 'dashbch', 'dashbtc', 'dasheth', 'dashltc', 'dashtrst', 'dashusd', 'dashxrp', 'ethbch', 'ethbtc', 'ethdash', 'ethltc', 'ethtrst', 'ethusd', 'ethxrp', 'ltcbch', 'ltcbtc', 'ltcdash', 'ltceth', 'ltctrst', 'ltcusd', 'ltcxrp', 'trstbch', 'trstbtc', 'trstdash', 'trsteth', 'trstltc', 'trstusd', 'trstxrp', 'usdbch', 'usdbtc', 'usddash', 'usdeth', 'usdltc', 'usdtrst', 'usdxrp', 'xrpbch', 'xrpbtc', 'xrpdash', 'xrpeth', 'xrpltc', 'xrptrst', 'xrpusd'].include?(market)
        fail ArgumentError, "invalid value for 'market', must be one of bchbtc, bchdash, bcheth, bchltc, bchtrst, bchusd, bchxrp, btcbch, btcdash, btceth, btcltc, btctrst, btcusd, btcxrp, dashbch, dashbtc, dasheth, dashltc, dashtrst, dashusd, dashxrp, ethbch, ethbtc, ethdash, ethltc, ethtrst, ethusd, ethxrp, ltcbch, ltcbtc, ltcdash, ltceth, ltctrst, ltcusd, ltcxrp, trstbch, trstbtc, trstdash, trsteth, trstltc, trstusd, trstxrp, usdbch, usdbtc, usddash, usdeth, usdltc, usdtrst, usdxrp, xrpbch, xrpbtc, xrpdash, xrpeth, xrpltc, xrptrst, xrpusd"
      end
      # verify the required parameter 'side' is set
      if @api_client.config.client_side_validation && side.nil?
        fail ArgumentError, "Missing the required parameter 'side' when calling MarketApi.post_market_orders"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['sell', 'buy'].include?(side)
        fail ArgumentError, "invalid value for 'side', must be one of sell, buy"
      end
      # verify the required parameter 'volume' is set
      if @api_client.config.client_side_validation && volume.nil?
        fail ArgumentError, "Missing the required parameter 'volume' when calling MarketApi.post_market_orders"
      end
      # verify the required parameter 'price' is set
      if @api_client.config.client_side_validation && price.nil?
        fail ArgumentError, "Missing the required parameter 'price' when calling MarketApi.post_market_orders"
      end
      if @api_client.config.client_side_validation && opts[:'ord_type'] && !['market', 'limit'].include?(opts[:'ord_type'])
        fail ArgumentError, 'invalid value for "ord_type", must be one of market, limit'
      end
      # resource path
      local_var_path = '/peatio/market/orders'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['market'] = market
      form_params['side'] = side
      form_params['volume'] = volume
      form_params['price'] = price
      form_params['ord_type'] = opts[:'ord_type'] if !opts[:'ord_type'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#post_market_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel all my orders.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :side If present, only sell orders (asks) or buy orders (bids) will be canncelled.
    # @return [Order]
    def post_market_orders_cancel(opts = {})
      data, _status_code, _headers = post_market_orders_cancel_with_http_info(opts)
      data
    end

    # Cancel all my orders.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :side If present, only sell orders (asks) or buy orders (bids) will be canncelled.
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def post_market_orders_cancel_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.post_market_orders_cancel ...'
      end
      if @api_client.config.client_side_validation && opts[:'side'] && !['sell', 'buy'].include?(opts[:'side'])
        fail ArgumentError, 'invalid value for "side", must be one of sell, buy'
      end
      # resource path
      local_var_path = '/peatio/market/orders/cancel'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['side'] = opts[:'side'] if !opts[:'side'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#post_market_orders_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel an order.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_market_orders_id_cancel(id, opts = {})
      post_market_orders_id_cancel_with_http_info(id, opts)
      nil
    end

    # Cancel an order.
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_market_orders_id_cancel_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.post_market_orders_id_cancel ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MarketApi.post_market_orders_id_cancel"
      end
      # resource path
      local_var_path = '/peatio/market/orders/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#post_market_orders_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
