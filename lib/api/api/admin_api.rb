=begin
#OPEX API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.14-alpha

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module API
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes label for user
    # @param uid user uniq id
    # @param key label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param scope label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_admin_users_labels(uid, key, scope, opts = {})
      delete_admin_users_labels_with_http_info(uid, key, scope, opts)
      nil
    end

    # Deletes label for user
    # @param uid user uniq id
    # @param key label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param scope label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_admin_users_labels_with_http_info(uid, key, scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.delete_admin_users_labels ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling AdminApi.delete_admin_users_labels"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AdminApi.delete_admin_users_labels"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling AdminApi.delete_admin_users_labels"
      end
      # resource path
      local_var_path = '/barong/admin/users/labels'

      # query parameters
      query_params = {}
      query_params[:'uid'] = uid
      query_params[:'key'] = key
      query_params[:'scope'] = scope

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_admin_users_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns array of users as paginated collection
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number (defaults to 1). (default to 1)
    # @option opts [Integer] :limit Number of withdraws per page (defaults to 100, maximum is 1000). (default to 100)
    # @return [nil]
    def get_admin_users(opts = {})
      get_admin_users_with_http_info(opts)
      nil
    end

    # Returns array of users as paginated collection
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number (defaults to 1).
    # @option opts [Integer] :limit Number of withdraws per page (defaults to 100, maximum is 1000).
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_admin_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_admin_users ...'
      end
      # resource path
      local_var_path = '/barong/admin/users'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_admin_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns user info
    # @param uid user uniq id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_admin_users_uid(uid, opts = {})
      get_admin_users_uid_with_http_info(uid, opts)
      nil
    end

    # Returns user info
    # @param uid user uniq id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_admin_users_uid_with_http_info(uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.get_admin_users_uid ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling AdminApi.get_admin_users_uid"
      end
      # resource path
      local_var_path = '/barong/admin/users/{uid}'.sub('{' + 'uid' + '}', uid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_admin_users_uid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Adds label for user
    # @param uid user uniq id
    # @param key label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param value label value. [A-Za-z0-9_-] should be used. Min - 3, max - 255 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Label scope: &#39;public&#39; or &#39;private&#39;. Default is public
    # @return [nil]
    def post_admin_users_labels(uid, key, value, opts = {})
      post_admin_users_labels_with_http_info(uid, key, value, opts)
      nil
    end

    # Adds label for user
    # @param uid user uniq id
    # @param key label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param value label value. [A-Za-z0-9_-] should be used. Min - 3, max - 255 characters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Label scope: &#39;public&#39; or &#39;private&#39;. Default is public
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_admin_users_labels_with_http_info(uid, key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.post_admin_users_labels ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling AdminApi.post_admin_users_labels"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AdminApi.post_admin_users_labels"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling AdminApi.post_admin_users_labels"
      end
      # resource path
      local_var_path = '/barong/admin/users/labels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['uid'] = uid
      form_params['key'] = key
      form_params['value'] = value
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#post_admin_users_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update user
    # @param uid user uniq id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state user state
    # @option opts [BOOLEAN] :otp user 2fa status
    # @option opts [String] :role user role
    # @return [nil]
    def put_admin_users(uid, opts = {})
      put_admin_users_with_http_info(uid, opts)
      nil
    end

    # Update user
    # @param uid user uniq id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state user state
    # @option opts [BOOLEAN] :otp user 2fa status
    # @option opts [String] :role user role
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_admin_users_with_http_info(uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.put_admin_users ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling AdminApi.put_admin_users"
      end
      # resource path
      local_var_path = '/barong/admin/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['uid'] = uid
      form_params['state'] = opts[:'state'] if !opts[:'state'].nil?
      form_params['otp'] = opts[:'otp'] if !opts[:'otp'].nil?
      form_params['role'] = opts[:'role'] if !opts[:'role'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#put_admin_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update user label scope
    # @param uid user uniq id
    # @param key Label key.
    # @param scope label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param value Label value.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_admin_users_labels(uid, key, scope, value, opts = {})
      put_admin_users_labels_with_http_info(uid, key, scope, value, opts)
      nil
    end

    # Update user label scope
    # @param uid user uniq id
    # @param key Label key.
    # @param scope label key. [a-z0-9_-]+ should be used. Min - 3, max - 255 characters.
    # @param value Label value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_admin_users_labels_with_http_info(uid, key, scope, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.put_admin_users_labels ...'
      end
      # verify the required parameter 'uid' is set
      if @api_client.config.client_side_validation && uid.nil?
        fail ArgumentError, "Missing the required parameter 'uid' when calling AdminApi.put_admin_users_labels"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling AdminApi.put_admin_users_labels"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling AdminApi.put_admin_users_labels"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling AdminApi.put_admin_users_labels"
      end
      # resource path
      local_var_path = '/barong/admin/users/labels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['uid'] = uid
      form_params['key'] = key
      form_params['scope'] = scope
      form_params['value'] = value

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#put_admin_users_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
