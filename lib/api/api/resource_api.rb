=begin
#OPEX API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.14-alpha

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module API
  class ResourceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an api key
    # @param kid 
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_api_keys_kid(kid, totp_code, opts = {})
      delete_resource_api_keys_kid_with_http_info(kid, totp_code, opts)
      nil
    end

    # Delete an api key
    # @param kid 
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_resource_api_keys_kid_with_http_info(kid, totp_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_resource_api_keys_kid ...'
      end
      # verify the required parameter 'kid' is set
      if @api_client.config.client_side_validation && kid.nil?
        fail ArgumentError, "Missing the required parameter 'kid' when calling ResourceApi.delete_resource_api_keys_kid"
      end
      # verify the required parameter 'totp_code' is set
      if @api_client.config.client_side_validation && totp_code.nil?
        fail ArgumentError, "Missing the required parameter 'totp_code' when calling ResourceApi.delete_resource_api_keys_kid"
      end
      # resource path
      local_var_path = '/barong/resource/api_keys/{kid}'.sub('{' + 'kid' + '}', kid.to_s)

      # query parameters
      query_params = {}
      query_params[:'totp_code'] = totp_code

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_resource_api_keys_kid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a label  with 'public' scope.
    # @param key Label key.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_resource_labels_key(key, opts = {})
      delete_resource_labels_key_with_http_info(key, opts)
      nil
    end

    # Delete a label  with &#39;public&#39; scope.
    # @param key Label key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_resource_labels_key_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_resource_labels_key ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ResourceApi.delete_resource_labels_key"
      end
      # resource path
      local_var_path = '/barong/resource/labels/{key}'.sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_resource_labels_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all api keys for current account.
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_api_keys(totp_code, opts = {})
      get_resource_api_keys_with_http_info(totp_code, opts)
      nil
    end

    # List all api keys for current account.
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_api_keys_with_http_info(totp_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_api_keys ...'
      end
      # verify the required parameter 'totp_code' is set
      if @api_client.config.client_side_validation && totp_code.nil?
        fail ArgumentError, "Missing the required parameter 'totp_code' when calling ResourceApi.get_resource_api_keys"
      end
      # resource path
      local_var_path = '/barong/resource/api_keys'

      # query parameters
      query_params = {}
      query_params[:'totp_code'] = totp_code

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return current user documents list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_documents(opts = {})
      get_resource_documents_with_http_info(opts)
      nil
    end

    # Return current user documents list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_documents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_documents ...'
      end
      # resource path
      local_var_path = '/barong/resource/documents'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all labels for current user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_labels(opts = {})
      get_resource_labels_with_http_info(opts)
      nil
    end

    # List all labels for current user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_labels ...'
      end
      # resource path
      local_var_path = '/barong/resource/labels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a label by key.
    # @param key Label key.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_labels_key(key, opts = {})
      get_resource_labels_key_with_http_info(key, opts)
      nil
    end

    # Return a label by key.
    # @param key Label key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_labels_key_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_labels_key ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ResourceApi.get_resource_labels_key"
      end
      # resource path
      local_var_path = '/barong/resource/labels/{key}'.sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_labels_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return profile of current resource owner
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_profiles_me(opts = {})
      get_resource_profiles_me_with_http_info(opts)
      nil
    end

    # Return profile of current resource owner
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_profiles_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_profiles_me ...'
      end
      # resource path
      local_var_path = '/barong/resource/profiles/me'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_profiles_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns user activity
    # @param topic Topic of user activity. Allowed: [all, password, session, otp]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_users_activity_topic(topic, opts = {})
      get_resource_users_activity_topic_with_http_info(topic, opts)
      nil
    end

    # Returns user activity
    # @param topic Topic of user activity. Allowed: [all, password, session, otp]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_users_activity_topic_with_http_info(topic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_users_activity_topic ...'
      end
      # verify the required parameter 'topic' is set
      if @api_client.config.client_side_validation && topic.nil?
        fail ArgumentError, "Missing the required parameter 'topic' when calling ResourceApi.get_resource_users_activity_topic"
      end
      # resource path
      local_var_path = '/barong/resource/users/activity/{topic}'.sub('{' + 'topic' + '}', topic.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_users_activity_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns current user
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_resource_users_me(opts = {})
      get_resource_users_me_with_http_info(opts)
      nil
    end

    # Returns current user
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_resource_users_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_resource_users_me ...'
      end
      # resource path
      local_var_path = '/barong/resource/users/me'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_resource_users_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates an api key
    # @param kid 
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope comma separated scopes
    # @option opts [String] :state State of API Key. \&quot;active\&quot; state means key is active and can be used for auth
    # @return [nil]
    def patch_resource_api_keys_kid(kid, totp_code, opts = {})
      patch_resource_api_keys_kid_with_http_info(kid, totp_code, opts)
      nil
    end

    # Updates an api key
    # @param kid 
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope comma separated scopes
    # @option opts [String] :state State of API Key. \&quot;active\&quot; state means key is active and can be used for auth
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_resource_api_keys_kid_with_http_info(kid, totp_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.patch_resource_api_keys_kid ...'
      end
      # verify the required parameter 'kid' is set
      if @api_client.config.client_side_validation && kid.nil?
        fail ArgumentError, "Missing the required parameter 'kid' when calling ResourceApi.patch_resource_api_keys_kid"
      end
      # verify the required parameter 'totp_code' is set
      if @api_client.config.client_side_validation && totp_code.nil?
        fail ArgumentError, "Missing the required parameter 'totp_code' when calling ResourceApi.patch_resource_api_keys_kid"
      end
      # resource path
      local_var_path = '/barong/resource/api_keys/{kid}'.sub('{' + 'kid' + '}', kid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['totp_code'] = totp_code
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      form_params['state'] = opts[:'state'] if !opts[:'state'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#patch_resource_api_keys_kid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a label with 'public' scope.
    # @param key Label key.
    # @param value Label value.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_resource_labels_key(key, value, opts = {})
      patch_resource_labels_key_with_http_info(key, value, opts)
      nil
    end

    # Update a label with &#39;public&#39; scope.
    # @param key Label key.
    # @param value Label value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_resource_labels_key_with_http_info(key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.patch_resource_labels_key ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ResourceApi.patch_resource_labels_key"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling ResourceApi.patch_resource_labels_key"
      end
      # resource path
      local_var_path = '/barong/resource/labels/{key}'.sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['value'] = value

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#patch_resource_labels_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an api key
    # @param algorithm 
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @option opts [String] :kid 
    # @option opts [String] :scope comma separated scopes
    # @return [nil]
    def post_resource_api_keys(algorithm, totp_code, opts = {})
      post_resource_api_keys_with_http_info(algorithm, totp_code, opts)
      nil
    end

    # Create an api key
    # @param algorithm 
    # @param totp_code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @option opts [String] :kid 
    # @option opts [String] :scope comma separated scopes
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_api_keys_with_http_info(algorithm, totp_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_api_keys ...'
      end
      # verify the required parameter 'algorithm' is set
      if @api_client.config.client_side_validation && algorithm.nil?
        fail ArgumentError, "Missing the required parameter 'algorithm' when calling ResourceApi.post_resource_api_keys"
      end
      # verify the required parameter 'totp_code' is set
      if @api_client.config.client_side_validation && totp_code.nil?
        fail ArgumentError, "Missing the required parameter 'totp_code' when calling ResourceApi.post_resource_api_keys"
      end
      # resource path
      local_var_path = '/barong/resource/api_keys'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['algorithm'] = algorithm
      form_params['totp_code'] = totp_code
      form_params['kid'] = opts[:'kid'] if !opts[:'kid'].nil?
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a new document for current user
    # @param doc_expire Document expiration date
    # @param doc_type Document type
    # @param doc_number Document number
    # @param upload Array of Rack::Multipart::UploadedFile
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_documents(doc_expire, doc_type, doc_number, upload, opts = {})
      post_resource_documents_with_http_info(doc_expire, doc_type, doc_number, upload, opts)
      nil
    end

    # Upload a new document for current user
    # @param doc_expire Document expiration date
    # @param doc_type Document type
    # @param doc_number Document number
    # @param upload Array of Rack::Multipart::UploadedFile
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_documents_with_http_info(doc_expire, doc_type, doc_number, upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_documents ...'
      end
      # verify the required parameter 'doc_expire' is set
      if @api_client.config.client_side_validation && doc_expire.nil?
        fail ArgumentError, "Missing the required parameter 'doc_expire' when calling ResourceApi.post_resource_documents"
      end
      # verify the required parameter 'doc_type' is set
      if @api_client.config.client_side_validation && doc_type.nil?
        fail ArgumentError, "Missing the required parameter 'doc_type' when calling ResourceApi.post_resource_documents"
      end
      # verify the required parameter 'doc_number' is set
      if @api_client.config.client_side_validation && doc_number.nil?
        fail ArgumentError, "Missing the required parameter 'doc_number' when calling ResourceApi.post_resource_documents"
      end
      # verify the required parameter 'upload' is set
      if @api_client.config.client_side_validation && upload.nil?
        fail ArgumentError, "Missing the required parameter 'upload' when calling ResourceApi.post_resource_documents"
      end
      # resource path
      local_var_path = '/barong/resource/documents'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['doc_expire'] = doc_expire
      form_params['doc_type'] = doc_type
      form_params['doc_number'] = doc_number
      form_params['upload'] = upload

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a label with 'public' scope.
    # @param key Label key.
    # @param value Label value.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_labels(key, value, opts = {})
      post_resource_labels_with_http_info(key, value, opts)
      nil
    end

    # Create a label with &#39;public&#39; scope.
    # @param key Label key.
    # @param value Label value.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_labels_with_http_info(key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_labels ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling ResourceApi.post_resource_labels"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling ResourceApi.post_resource_labels"
      end
      # resource path
      local_var_path = '/barong/resource/labels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['key'] = key
      form_params['value'] = value

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enable 2FA
    # @param code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_otp_enable(code, opts = {})
      post_resource_otp_enable_with_http_info(code, opts)
      nil
    end

    # Enable 2FA
    # @param code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_otp_enable_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_otp_enable ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling ResourceApi.post_resource_otp_enable"
      end
      # resource path
      local_var_path = '/barong/resource/otp/enable'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['code'] = code

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_otp_enable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate qr code for 2FA
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_otp_generate_qrcode(opts = {})
      post_resource_otp_generate_qrcode_with_http_info(opts)
      nil
    end

    # Generate qr code for 2FA
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_otp_generate_qrcode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_otp_generate_qrcode ...'
      end
      # resource path
      local_var_path = '/barong/resource/otp/generate_qrcode'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_otp_generate_qrcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Verify 2FA code
    # @param code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_otp_verify(code, opts = {})
      post_resource_otp_verify_with_http_info(code, opts)
      nil
    end

    # Verify 2FA code
    # @param code Code from Google Authenticator
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_otp_verify_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_otp_verify ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling ResourceApi.post_resource_otp_verify"
      end
      # resource path
      local_var_path = '/barong/resource/otp/verify'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['code'] = code

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_otp_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add new phone
    # @param phone_number Phone number with country code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_phones(phone_number, opts = {})
      post_resource_phones_with_http_info(phone_number, opts)
      nil
    end

    # Add new phone
    # @param phone_number Phone number with country code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_phones_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_phones ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling ResourceApi.post_resource_phones"
      end
      # resource path
      local_var_path = '/barong/resource/phones'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['phone_number'] = phone_number

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_phones\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resend activation code
    # @param phone_number Phone number with country code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_phones_send_code(phone_number, opts = {})
      post_resource_phones_send_code_with_http_info(phone_number, opts)
      nil
    end

    # Resend activation code
    # @param phone_number Phone number with country code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_phones_send_code_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_phones_send_code ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling ResourceApi.post_resource_phones_send_code"
      end
      # resource path
      local_var_path = '/barong/resource/phones/send_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['phone_number'] = phone_number

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_phones_send_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Verify a phone
    # @param phone_number Phone number with country code
    # @param verification_code Verification code from sms
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_phones_verify(phone_number, verification_code, opts = {})
      post_resource_phones_verify_with_http_info(phone_number, verification_code, opts)
      nil
    end

    # Verify a phone
    # @param phone_number Phone number with country code
    # @param verification_code Verification code from sms
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_phones_verify_with_http_info(phone_number, verification_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_phones_verify ...'
      end
      # verify the required parameter 'phone_number' is set
      if @api_client.config.client_side_validation && phone_number.nil?
        fail ArgumentError, "Missing the required parameter 'phone_number' when calling ResourceApi.post_resource_phones_verify"
      end
      # verify the required parameter 'verification_code' is set
      if @api_client.config.client_side_validation && verification_code.nil?
        fail ArgumentError, "Missing the required parameter 'verification_code' when calling ResourceApi.post_resource_phones_verify"
      end
      # resource path
      local_var_path = '/barong/resource/phones/verify'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['phone_number'] = phone_number
      form_params['verification_code'] = verification_code

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_phones_verify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a profile for current_user
    # @param first_name 
    # @param last_name 
    # @param dob 
    # @param address 
    # @param postcode 
    # @param city 
    # @param country 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_resource_profiles(first_name, last_name, dob, address, postcode, city, country, opts = {})
      post_resource_profiles_with_http_info(first_name, last_name, dob, address, postcode, city, country, opts)
      nil
    end

    # Create a profile for current_user
    # @param first_name 
    # @param last_name 
    # @param dob 
    # @param address 
    # @param postcode 
    # @param city 
    # @param country 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_resource_profiles_with_http_info(first_name, last_name, dob, address, postcode, city, country, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.post_resource_profiles ...'
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling ResourceApi.post_resource_profiles"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling ResourceApi.post_resource_profiles"
      end
      # verify the required parameter 'dob' is set
      if @api_client.config.client_side_validation && dob.nil?
        fail ArgumentError, "Missing the required parameter 'dob' when calling ResourceApi.post_resource_profiles"
      end
      # verify the required parameter 'address' is set
      if @api_client.config.client_side_validation && address.nil?
        fail ArgumentError, "Missing the required parameter 'address' when calling ResourceApi.post_resource_profiles"
      end
      # verify the required parameter 'postcode' is set
      if @api_client.config.client_side_validation && postcode.nil?
        fail ArgumentError, "Missing the required parameter 'postcode' when calling ResourceApi.post_resource_profiles"
      end
      # verify the required parameter 'city' is set
      if @api_client.config.client_side_validation && city.nil?
        fail ArgumentError, "Missing the required parameter 'city' when calling ResourceApi.post_resource_profiles"
      end
      # verify the required parameter 'country' is set
      if @api_client.config.client_side_validation && country.nil?
        fail ArgumentError, "Missing the required parameter 'country' when calling ResourceApi.post_resource_profiles"
      end
      # resource path
      local_var_path = '/barong/resource/profiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['first_name'] = first_name
      form_params['last_name'] = last_name
      form_params['dob'] = dob
      form_params['address'] = address
      form_params['postcode'] = postcode
      form_params['city'] = city
      form_params['country'] = country

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#post_resource_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets new account password
    # @param old_password Previous account password
    # @param new_password User password
    # @param confirm_password User password
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_resource_users_password(old_password, new_password, confirm_password, opts = {})
      put_resource_users_password_with_http_info(old_password, new_password, confirm_password, opts)
      nil
    end

    # Sets new account password
    # @param old_password Previous account password
    # @param new_password User password
    # @param confirm_password User password
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_resource_users_password_with_http_info(old_password, new_password, confirm_password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.put_resource_users_password ...'
      end
      # verify the required parameter 'old_password' is set
      if @api_client.config.client_side_validation && old_password.nil?
        fail ArgumentError, "Missing the required parameter 'old_password' when calling ResourceApi.put_resource_users_password"
      end
      # verify the required parameter 'new_password' is set
      if @api_client.config.client_side_validation && new_password.nil?
        fail ArgumentError, "Missing the required parameter 'new_password' when calling ResourceApi.put_resource_users_password"
      end
      # verify the required parameter 'confirm_password' is set
      if @api_client.config.client_side_validation && confirm_password.nil?
        fail ArgumentError, "Missing the required parameter 'confirm_password' when calling ResourceApi.put_resource_users_password"
      end
      # resource path
      local_var_path = '/barong/resource/users/password'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['old_password'] = old_password
      form_params['new_password'] = new_password
      form_params['confirm_password'] = confirm_password

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#put_resource_users_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
