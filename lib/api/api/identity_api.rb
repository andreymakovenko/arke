=begin
#OPEX API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 2.0.14-alpha

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'uri'

module API
  class IdentityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Destroy current session
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_identity_sessions(opts = {})
      delete_identity_sessions_with_http_info(opts)
      nil
    end

    # Destroy current session
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_identity_sessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.delete_identity_sessions ...'
      end
      # resource path
      local_var_path = '/barong/identity/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#delete_identity_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Test connectivity
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_identity_ping(opts = {})
      get_identity_ping_with_http_info(opts)
      nil
    end

    # Test connectivity
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_identity_ping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.get_identity_ping ...'
      end
      # resource path
      local_var_path = '/barong/identity/ping'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#get_identity_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get server current unix timestamp.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_identity_time(opts = {})
      get_identity_time_with_http_info(opts)
      nil
    end

    # Get server current unix timestamp.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_identity_time_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.get_identity_time ...'
      end
      # resource path
      local_var_path = '/barong/identity/time'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#get_identity_time\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Register Geetest captcha
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_identity_users_register_geetest(opts = {})
      get_identity_users_register_geetest_with_http_info(opts)
      nil
    end

    # Register Geetest captcha
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_identity_users_register_geetest_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.get_identity_users_register_geetest ...'
      end
      # resource path
      local_var_path = '/barong/identity/users/register_geetest'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#get_identity_users_register_geetest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start a new session
    # @param email 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :captcha_response Response from captcha widget
    # @option opts [String] :otp_code Code from Google Authenticator
    # @return [nil]
    def post_identity_sessions(email, password, opts = {})
      post_identity_sessions_with_http_info(email, password, opts)
      nil
    end

    # Start a new session
    # @param email 
    # @param password 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :captcha_response Response from captcha widget
    # @option opts [String] :otp_code Code from Google Authenticator
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_identity_sessions_with_http_info(email, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.post_identity_sessions ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling IdentityApi.post_identity_sessions"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling IdentityApi.post_identity_sessions"
      end
      # resource path
      local_var_path = '/barong/identity/sessions'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['email'] = email
      form_params['password'] = password
      form_params['captcha_response'] = opts[:'captcha_response'] if !opts[:'captcha_response'].nil?
      form_params['otp_code'] = opts[:'otp_code'] if !opts[:'otp_code'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#post_identity_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates new user
    # @param email User Email
    # @param password User Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refid Referral uid
    # @option opts [String] :captcha_response Response from captcha widget
    # @return [nil]
    def post_identity_users(email, password, opts = {})
      post_identity_users_with_http_info(email, password, opts)
      nil
    end

    # Creates new user
    # @param email User Email
    # @param password User Password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refid Referral uid
    # @option opts [String] :captcha_response Response from captcha widget
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_identity_users_with_http_info(email, password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.post_identity_users ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling IdentityApi.post_identity_users"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling IdentityApi.post_identity_users"
      end
      # resource path
      local_var_path = '/barong/identity/users'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['email'] = email
      form_params['password'] = password
      form_params['refid'] = opts[:'refid'] if !opts[:'refid'].nil?
      form_params['captcha_response'] = opts[:'captcha_response'] if !opts[:'captcha_response'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#post_identity_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirms an account
    # @param token Token from email
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_identity_users_email_confirm_code(token, opts = {})
      post_identity_users_email_confirm_code_with_http_info(token, opts)
      nil
    end

    # Confirms an account
    # @param token Token from email
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_identity_users_email_confirm_code_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.post_identity_users_email_confirm_code ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling IdentityApi.post_identity_users_email_confirm_code"
      end
      # resource path
      local_var_path = '/barong/identity/users/email/confirm_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['token'] = token

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#post_identity_users_email_confirm_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send confirmations instructions
    # @param email Account email
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_identity_users_email_generate_code(email, opts = {})
      post_identity_users_email_generate_code_with_http_info(email, opts)
      nil
    end

    # Send confirmations instructions
    # @param email Account email
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_identity_users_email_generate_code_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.post_identity_users_email_generate_code ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling IdentityApi.post_identity_users_email_generate_code"
      end
      # resource path
      local_var_path = '/barong/identity/users/email/generate_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['email'] = email

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#post_identity_users_email_generate_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets new account password
    # @param reset_password_token Token from email
    # @param password User password
    # @param confirm_password User password
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_identity_users_password_confirm_code(reset_password_token, password, confirm_password, opts = {})
      post_identity_users_password_confirm_code_with_http_info(reset_password_token, password, confirm_password, opts)
      nil
    end

    # Sets new account password
    # @param reset_password_token Token from email
    # @param password User password
    # @param confirm_password User password
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_identity_users_password_confirm_code_with_http_info(reset_password_token, password, confirm_password, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.post_identity_users_password_confirm_code ...'
      end
      # verify the required parameter 'reset_password_token' is set
      if @api_client.config.client_side_validation && reset_password_token.nil?
        fail ArgumentError, "Missing the required parameter 'reset_password_token' when calling IdentityApi.post_identity_users_password_confirm_code"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling IdentityApi.post_identity_users_password_confirm_code"
      end
      # verify the required parameter 'confirm_password' is set
      if @api_client.config.client_side_validation && confirm_password.nil?
        fail ArgumentError, "Missing the required parameter 'confirm_password' when calling IdentityApi.post_identity_users_password_confirm_code"
      end
      # resource path
      local_var_path = '/barong/identity/users/password/confirm_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['reset_password_token'] = reset_password_token
      form_params['password'] = password
      form_params['confirm_password'] = confirm_password

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#post_identity_users_password_confirm_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send password reset instructions
    # @param email Account email
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_identity_users_password_generate_code(email, opts = {})
      post_identity_users_password_generate_code_with_http_info(email, opts)
      nil
    end

    # Send password reset instructions
    # @param email Account email
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_identity_users_password_generate_code_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.post_identity_users_password_generate_code ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling IdentityApi.post_identity_users_password_generate_code"
      end
      # resource path
      local_var_path = '/barong/identity/users/password/generate_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}
      form_params['email'] = email

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#post_identity_users_password_generate_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
